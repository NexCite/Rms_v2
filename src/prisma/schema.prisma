generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// generator zod {
//   provider = "prisma-zod-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  logo                 String                 @default("")
  phone_number         String                 @unique
  email                String                 @unique
  users                User[]
  invoices             Invoice[]
  accounts             Account[]
  account_entries      Account_Entry[]
  brokers              Broker[]
  employees            Employee[]
  traders              Trader[]
  logs                 Log[]
  auths                Auth[]
  payments             Payment[]
  media                Media[]
  currencies           Currency[]
  categories           Category[]
  sub_categories       SubCategory[]
  two_digits           Two_Digit[]
  three_digits         Three_Digit[]
  more_than_four_digit More_Than_Four_Digit[]
  entries              Entry[]
  sub_entries          SubEntry[]
  equities             Equity[]
  coverage_boxes       CoverageBox[]
  expensive_boxes      ExpensiveBox[]
  pl_boxes             P_LBox[]
  agent_boxes          AgentBox[]
  client_boxes         ManagerBox[]
  credit_boxes         CreditBox[]
  adgjustment_boxes    AdjustmentBox[]
  schedule_configes    ScheduleConfig[]
  schedules            Schedule[]
  vacations            Vacation[]
  roles                Role[]
  levels               ChartOfAccount[]
  vouchers             Voucher[]
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  password   String   @default("")
  status     Status   @default(Enable)
  username   String
  path       String[]
  auth       Auth[]
  brokers    Broker[]
  traders    Trader[]

  invoices Invoice[]
  logs     Log[]
  role_id  Int?
  role     Role?     @relation(fields: [role_id], references: [id])

  payments             Payment[]
  employees            Employee[]
  accounts             Account[]
  currencies           Currency[]
  entries_level        Entry[]
  levels_1             Two_Digit[]
  levels_2             Three_Digit[]
  more_than_four_digit More_Than_Four_Digit[]
  clients_level        Account_Entry[]
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  type                 UserType               @default(User)
  permissions          UserPermission[]
  sub_categories       SubCategory[]
  categories           Category[]
  config_id            Int?
  config               Config?                @relation(fields: [config_id], references: [id], onDelete: Cascade)
  levels               ChartOfAccount[]
  vouchers             Voucher[]

  @@unique([username, config_id], name: "unique_combination")
}

model Employee {
  id               Int              @id @default(autoincrement())
  first_name       String
  last_name        String
  phone_number     String
  gender           Gender
  address1         String           @default("")
  address2         String           @default("")
  country          String           @default("")
  email            String           @default("")
  status           Status           @default(Enable)
  create_date      DateTime         @default(now())
  modified_date    DateTime         @default(now()) @updatedAt
  username         String
  user_id          Int
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id        Int?
  config           Config?          @relation(fields: [config_id], references: [id], onDelete: Cascade)
  attendances      Attendance[]
  advance_payments AdvancePayment[]
  vacation         Vacation[]

  @@unique([username, id, config_id], name: "unique_combination")
}

model Trader {
  id            Int       @id @default(autoincrement())
  first_name    String
  last_name     String
  phone_number  String
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  broker_id     Int?
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  accounts      Account[]
  broker        Broker?   @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([username, id, config_id, phone_number], name: "unique_combination")
}

model Broker {
  id            Int       @id
  first_name    String
  last_name     String
  phone_number  String
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  traders       Trader[]
  invoices      Invoice[]
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, username, config_id, phone_number], name: "unique_combination")
}

model Log {
  id          Int      @id @default(autoincrement())
  create_date DateTime @default(now())
  page        String?
  action      Action
  body        String?
  user_id     Int?
  error       String?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?  @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

enum Action {
  Add
  Update
  Delete
  View
}

model Auth {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      Status
  create_date DateTime @default(now())
  config_id   Int?
  config      Config?  @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([token, id, config_id], name: "unique_combination")
}

model Account {
  id            Int       @id
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  currency_id   Int
  trader_id     Int?
  status        Status    @default(Enable)
  user_id       Int?
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trader        Trader?   @relation(fields: [trader_id], references: [id], onDelete: Cascade)
  currency      Currency  @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([username, id, config_id], name: "unique_combination")
}

model Invoice {
  id              Int             @id @default(autoincrement())
  title           String
  description     String          @default("")
  note            String          @default("")
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  amount          Float
  discount        Float           @default(0)
  account_id      Int?
  user_id         Int?
  broker_id       Int?
  currency_id     Int?
  status          Status          @default(Enable)
  sub_category_id Int
  currency        Currency?       @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  account         Account?        @relation(fields: [account_id], references: [id], onDelete: Cascade)
  broker          Broker?         @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  payments        Payment[]
  user            User?           @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  media           Media?
  debit_credit    DebitCreditType @default(Debit)
  sub_category    SubCategory     @relation(fields: [sub_category_id], references: [id], onDelete: Cascade)
  config_id       Int?
  config          Config?         @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model Payment {
  id            Int         @id @default(autoincrement())
  amount        Float
  status        Status
  create_date   DateTime    @default(now())
  modified_date DateTime    @default(now()) @updatedAt
  description   String      @default("")
  note          String      @default("")
  user_id       Int?
  title         String
  type          PaymentType
  number_id     String      @default("")
  user          User?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  media         Media?
  invoice       Invoice     @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id    Int
  config_id     Int?
  config        Config?     @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model Media {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?   @default("")
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  type          MediaType
  path          String
  file_name     String
  status        Status    @default(Enable)
  invoice_id    Int?      @unique
  payment_id    Int?      @unique
  entry_id      Int?      @unique

  invoice Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  entry   Entry?   @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  payment     Payment?     @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?      @relation(fields: [config_id], references: [id], onDelete: Cascade)
  attendances Attendance[]
  vacation    Vacation[]
  voucher_id  Int?         @unique
  voucher     Voucher?     @relation(fields: [voucher_id], references: [id])

  @@unique([id, config_id, invoice_id, payment_id, entry_id], name: "unique_combination")
}

model Currency {
  id                    Int                    @id @default(autoincrement())
  name                  String
  symbol                String
  rate                  Float
  accounts              Account[]
  invoices              Invoice[]
  status                Status?                @default(Enable)
  Entries               Entry[]
  create_date           DateTime               @default(now())
  modified_date         DateTime               @default(now()) @updatedAt
  user_id               Int?
  user                  User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id             Int?
  config                Config?                @relation(fields: [config_id], references: [id], onDelete: Cascade)
  advance_payments      AdvancePayment[]
  account_entries       Account_Entry[]
  more_than_four_digits More_Than_Four_Digit[]
  levels                ChartOfAccount[]
  vouchers              Voucher[]
  voucher_items         VoucherItem[]

  @@unique([config_id, name], name: "unique_combination")
  @@unique([config_id, symbol], name: "unique_symbol")
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String
  sub_categories SubCategory[]
  create_date    DateTime      @default(now())
  modified_date  DateTime      @default(now()) @updatedAt
  status         Status?       @default(Enable)
  user_id        Int?

  user      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id Int?
  config    Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name], name: "unique_combination")
}

model SubCategory {
  id            Int       @id @default(autoincrement())
  name          String
  category_id   Int
  invoices      Invoice[]
  category      Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  user_id       Int?
  status        Status?   @default(Enable)

  user      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id Int?
  config    Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name, category_id], name: "unique_combination")
}

enum SubCategoryType {
  Credit
  Debit
  None
}

enum Gender {
  Male
  Female
  Other
}

enum MediaType {
  Image
  Pdf
  Logo
  File
  Video
}

enum Status {
  Enable
  Disable
  Pending
  Accepted
  Rejected
  Deleted
}

enum PaymentType {
  Cash
  Check
  Other
}

enum UserType {
  Admin
  User
}

enum DebitCreditType {
  Credit
  Debit
  Debit_Credit
}

enum DigitType {
  Assets
  Liabilities
  Owner_Equity
  Expensive
  Income
}

enum ChartOfAccountType {
  Income
  Expense
  Expensive
  Assets
  Equity
  Liabilities
  Current_Liabilities
  Non_Current_Liabilities
  Non_current_Assets
  Current_Assets
  Tangible
  Purchases
  Taxes
  Inventory
  Provision_For_End_of_Service_Indemnity
  Bank_Overdraft
  Cash_and_Cash_Equivalent
  Other_Revenue_and_Expenses
  CrUpdate_Card
  Personnel_Charges
  Other_CrUpdate_Balances
  Financial_Charges
  Payable
  External_Services
  Sales
  Capital
  Operating_Expenses
  Intangible_Fixed_Assets
  Amortization
  Cash
  Contributions
  Operating_Income
  Financial_Income
  Prepaid
  Financial
  Interest_and_Similar_Revenues
  Book_Value_of_Fixed_Assets_and_Disposed_of
  Interest_and_Other_Charges
  Other_Charges_and_Disbursements
  Sales_of_Production
  Purchase
  Cost_of_Revenue
  Other_Assets
  Negative_Exchange_Difference
  Brought_Forward_Results
  Amortization_Depreciation_and_Charges
  Variation_of_Stock
  Receivable
  Patente_Franchisee
  Miscellaneous
  Bank
  Provision_End_of_sce
  Fixed_Assets
  Net_Result_of_The_Financial_Period
}

enum AccountType {
  Client
  IB
  Supplier
  Employee
}

model Two_Digit {
  id              Int             @id
  name            String
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  three_digit     Three_Digit[]
  status          Status          @default(Enable)
  user_id         Int?
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_entries Account_Entry[]
  sub_entries     SubEntry[]

  type         DigitType?
  debit_credit DebitCreditType?
  config_id    Int?
  config       Config?          @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name], name: "unique_combination")
}

model Three_Digit {
  id                   Int                    @id @default(autoincrement())
  name                 String
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  more_than_four_digit More_Than_Four_Digit[]
  account_entries      Account_Entry[]

  two_digit_id Int
  two_digit    Two_Digit        @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  status       Status           @default(Enable)
  type         DigitType?
  debit_credit DebitCreditType?

  sub_entries SubEntry[]
  user_id     Int?
  user        User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?    @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name, two_digit_id], name: "unique_combination")
}

model More_Than_Four_Digit {
  id              Int              @id
  name            String
  create_date     DateTime         @default(now())
  modified_date   DateTime         @default(now()) @updatedAt
  three_digit_id  Int
  three_digit     Three_Digit      @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  status          Status           @default(Enable)
  type            DigitType?
  debit_credit    DebitCreditType?
  sub_entries     SubEntry[]
  user_id         Int?
  account_entries Account_Entry[]

  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)
  currency_id Int?
  currency    Currency? @relation(fields: [currency_id], references: [id])

  @@unique([id, config_id, name, three_digit_id], name: "unique_combination")
}

model LevelEntry {
  id Int @id @default(autoincrement())
}

model Voucher {
  id Int @id @default(autoincrement())

  rate          Float?
  currency_id   Int
  user_id       Int
  config_id     Int
  title         String
  description   String
  note          String?       @default("")
  to_date       DateTime      @default(now())
  media         Media?
  user          User          @relation(fields: [user_id], references: [id])
  currency      Currency      @relation(fields: [currency_id], references: [id])
  config        Config        @relation(fields: [config_id], references: [id])
  create_date   DateTime      @default(now())
  modified_date DateTime      @default(now()) @updatedAt
  voucher_items VoucherItem[]
}

model VoucherItem {
  id     Int   @id @default(autoincrement())
  amount Float

  rate                          Float
  debit_credit                  DebitCreditType
  voucher                       Voucher?        @relation(fields: [voucher_id], references: [id])
  voucher_id                    Int?
  currency_id                   Int
  currency                      Currency        @relation(fields: [currency_id], references: [id])
  chart_of_account_id           String
  chart_of_account              ChartOfAccount  @relation(fields: [chart_of_account_id], references: [id])
  reffrence_chart_of_account_id String?
  reference_chart_of_account    ChartOfAccount? @relation("reference", fields: [reffrence_chart_of_account_id], references: [id])
}

model ChartOfAccount {
  id                      String              @id
  class                   String?
  name                    String
  first_name              String?
  last_name               String?
  country                 String?
  address                 String?
  phone_number            String?
  parent_id               String?
  email                   String?
  limit_amount            Float?
  currency_id             Int?
  config_id               Int?
  user_id                 Int?
  chart_of_account_type   ChartOfAccountType?
  account_type            AccountType?
  business_id             String?
  debit_credit            DebitCreditType?
  config                  Config?             @relation(fields: [config_id], references: [id])
  currency                Currency?           @relation(fields: [currency_id], references: [id])
  user                    User?               @relation(fields: [user_id], references: [id])
  create_date             DateTime            @default(now())
  modified_date           DateTime            @default(now()) @updatedAt
  voucher_items           VoucherItem[]
  reffrence_voucher_items VoucherItem[]       @relation("reference")

  @@unique([config_id, id], name: "unique_id")
  @@unique([config_id, business_id], name: "unique_business_id")
}

model Account_Entry {
  id                      Int                   @id
  username                String                @default("")
  first_name              String
  last_name               String
  phone_number            String                @default("")
  gender                  Gender
  address1                String                @default("")
  address2                String                @default("")
  country                 String                @default("")
  email                   String                @default("")
  status                  Status                @default(Enable)
  create_date             DateTime              @default(now())
  modified_date           DateTime              @default(now()) @updatedAt
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  sub_entries             SubEntry[]
  user_id                 Int?
  currency_id             Int?
  user                    User?                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ref_entries             SubEntry[]            @relation("reference")
  type                    Account_Entry_Type?
  config_id               Int?
  config                  Config?               @relation(fields: [config_id], references: [id], onDelete: Cascade)
  info                    String?               @default("")
  currency                Currency?             @relation(fields: [currency_id], references: [id])

  @@unique([id, config_id], name: "unique_combination")
}

model Entry {
  id            Int        @id @default(autoincrement())
  rate          Float?
  title         String
  description   String
  note          String     @default("")
  create_date   DateTime   @default(now())
  modified_date DateTime   @default(now()) @updatedAt
  to_date       DateTime   @default(now())
  status        Status     @default(Enable)
  sub_entries   SubEntry[]
  media         Media?
  currency_id   Int
  currency      Currency   @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  user_id       Int?
  user          User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id     Int?
  config        Config?    @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model SubEntry {
  id                      Int                   @id @default(autoincrement())
  status                  Status                @default(Enable)
  amount                  Float
  account_entry_id        Int?
  account_entry           Account_Entry?        @relation(fields: [account_entry_id], references: [id], onDelete: Cascade)
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  reference               Account_Entry?        @relation("reference", fields: [reference_id], references: [id], onDelete: Cascade)
  reference_id            Int?
  type                    EntryType             @default(Debit)
  entry_id                Int
  entry                   Entry                 @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  config_id               Int?
  config                  Config?               @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, entry_id], name: "unique_combination")
}

enum EntryType {
  Debit
  Credit
}

model Role {
  id            Int              @id @default(autoincrement())
  name          String
  config_id     Int
  config        Config           @relation(fields: [config_id], references: [id])
  permissions   UserPermission[]
  users         User[]
  create_date   DateTime         @default(now())
  modified_date DateTime         @default(now()) @updatedAt

  @@unique([config_id, name], name: "unique_combination")
}

enum UserPermission {
  PaymentBox
  View_Equity
  View_Equities
  Create_Equity
  Update_Equity
  Delete_Equity
  Accounting
  Trading
  Setting
  View_Invoice
  Update_Invoice
  Delete_Invoice
  Create_Invoice
  View_Invoices
  View_Payment
  Update_Payment
  Delete_Payment
  Create_Payment
  View_Payments
  View_Profile
  Update_Profile
  View_Users
  View_User
  Update_User
  Delete_User
  Create_User
  Create_SubCategory
  Delete_SubCategory
  Update_SubCategory
  View_SubCategory
  View_SubCategories
  Create_Category
  Delete_Category
  Update_Category
  View_Category
  View_Categories
  Create_Currency
  Delete_Currency
  Update_Currency
  View_Currency
  View_Currencies
  View_Account
  View_Accounts
  Update_Account
  Delete_Account
  Create_Account
  View_Broker
  View_Brokers
  Update_Broker
  Delete_Broker
  Create_Broker
  View_Medias
  Delete_Media
  View_Log
  View_Activity
  View_Activities
  Delete_Activity
  Update_Activity
  Human_Resources
  Create_Employee
  Update_Employee
  Delete_Employee
  View_Employee
  View_Employees
  Create_Schedule
  Update_Schedule
  Delete_Schedule
  View_Schedule
  View_Schedules
  Create_Advance_Payment
  Update_Advance_Payment
  Delete_Advance_Payment
  View_Advance_Payment
  View_Advance_Payments
  Create_Vacation
  Update_Vaction_Status
  Update_Vacation
  Delete_Vacation
  View_Vacation
  View_Vacations
  Update_Config
  View_Config
  View_Schedules_Config
  Delete_Schedules_Config
  View_Schedule_Config
  Update_Schedule_Config
  Create_Schedule_Config
  Create_Role
  View_Role
  View_Roles
  Update_Role
  Delete_Role
  Reset
  View_Vouchers
  View_Voucher
  Create_Voucher
  Update_Voucher
  Delete_Voucher
  View_Chart_Of_Accounts
  View_Chart_Of_Account
  Create_Chart_Of_Account
  Update_Chart_Of_Account
  Delete_Chart_Of_Account
}

enum Account_Entry_Type {
  Client
  IB
  Supplier
}

model ScheduleConfig {
  id             Int       @id @default(autoincrement())
  from_time      DateTime?
  to_time        DateTime?
  from_over_time DateTime?
  to_over_time   DateTime?
  create_date    DateTime  @default(now())
  modified_date  DateTime  @default(now()) @updatedAt
  config_id      Int?
  config         Config?   @relation(fields: [config_id], references: [id])
}

model Equity {
  id               Int             @id @default(autoincrement())
  status           Status          @default(Enable)
  description      String
  create_date      DateTime        @default(now())
  modified_date    DateTime        @default(now()) @updatedAt
  to_date          DateTime        @default(now())
  coverage_boxes   CoverageBox[]
  manager_boxes    ManagerBox[]
  agent_boxes      AgentBox[]
  p_l              P_LBox[]
  expensive_box    ExpensiveBox[]
  config_id        Int?
  config           Config?         @relation(fields: [config_id], references: [id], onDelete: Cascade)
  credit_boxes     CreditBox[]
  adjustment_boxes AdjustmentBox[]

  @@unique([id, config_id], name: "unique_combination")
}

model CoverageBox {
  id             Int     @id @default(autoincrement())
  account        String
  starting_float Float
  current_float  Float
  closed_p_l     Float
  equity_id      Int
  payment_box    Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id      Int?
  config         Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model ManagerBox {
  id             Int    @id @default(autoincrement())
  manger         String
  starting_float Float
  current_float  Float
  p_l            Float
  commission     Float
  swap           Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model AgentBox {
  id         Int    @id @default(autoincrement())
  name       String
  commission Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model P_LBox {
  id   Int    @id @default(autoincrement())
  name String
  p_l  Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model ExpensiveBox {
  id        Int    @id @default(autoincrement())
  name      String
  expensive Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model CreditBox {
  id     Int    @id @default(autoincrement())
  name   String
  credit Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model AdjustmentBox {
  id         Int    @id @default(autoincrement())
  name       String
  adjustment Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model Schedule {
  id            Int          @id @default(autoincrement())
  create_date   DateTime     @default(now())
  modified_date DateTime     @default(now()) @updatedAt
  to_date       DateTime     @default(now())
  attendance    Attendance[]
  config_id     Int?
  config        Config?      @relation(fields: [config_id], references: [id])
}

model Attendance {
  id             Int       @id @default(autoincrement())
  from_time      DateTime?
  to_time        DateTime?
  from_over_time DateTime?
  to_over_time   DateTime?
  absent         Boolean   @default(false)
  description    String?   @default("")
  media          Media?    @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id       Int?
  employee       Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id    Int
  schedule       Schedule  @relation(fields: [schedule_id], references: [id])
  schedule_id    Int
}

model AdvancePayment {
  id            Int       @id @default(autoincrement())
  to_date       DateTime?
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  employee      Employee  @relation(fields: [employee_id], references: [id])
  employee_id   Int
  amount        Float
  currency      Currency  @relation(fields: [currency_id], references: [id])
  private       Boolean   @default(false)

  currency_id Int
}

model Vacation {
  id            Int          @id @default(autoincrement())
  from_date     DateTime?
  to_date       DateTime?
  status        Status       @default(Pending)
  description   String       @default("")
  media         Media?       @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id      Int?
  employee      Employee     @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id   Int
  type          VacationType
  create_date   DateTime     @default(now())
  modified_date DateTime     @default(now()) @updatedAt
  config_id     Int?
  config        Config?      @relation(fields: [config_id], references: [id])
}

enum VacationType {
  Annual_Leave
  Weekly_Leave
  Monthly_Leave
  Sickness_Leave
}
