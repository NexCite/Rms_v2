generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "prisma-zod-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id   Int    @id @default(autoincrement())
  name String @unique

  logo         String @default("")
  phone_number String @unique
  email        String @unique

  password             String
  username             String                 @unique
  users                User[]
  invoices             Invoice[]
  accounts             Account[]
  account_entries      Account_Entry[]
  brokers              Broker[]
  employees            Employee[]
  traders              Trader[]
  logs                 Log[]
  auths                Auth[]
  payments             Payment[]
  media                Media[]
  currencies           Currency[]
  categories           Category[]
  sub_categories       SubCategory[]
  two_digits           Two_Digit[]
  three_digits         Three_Digit[]
  more_than_four_digit More_Than_Four_Digit[]
  entries              Entry[]
  sub_entries          SubEntry[]
  equities             Equity[]
  coverage_boxes       CoverageBox[]
  expensive_boxes      ExpensiveBox[]
  pl_boxes             P_LBox[]
  agent_boxes          AgentBox[]

  client_boxes      ManagerBox[]
  credit_boxes      CreditBox[]
  adgjustment_boxes AdjustmentBox[]
  schedule_configes ScheduleConfig[]
  schedules         Schedule[]
  vacations         Vacation[]
  roles             Role[]
}

model User {
  id           Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  password     String   @default("")
  phone_number String
  gender       Gender
  address1     String   @default("")
  address2     String   @default("")
  country      String   @default("")
  email        String   @default("")
  status       Status   @default(Enable)
  username     String
  path         String[]
  auth         Auth[]
  brokers      Broker[]
  traders      Trader[]

  invoices Invoice[]
  logs     Log[]
  role_id  Int?
  role     Role?     @relation(fields: [role_id], references: [id])

  payments             Payment[]
  employees            Employee[]
  accounts             Account[]
  currencies           Currency[]
  entries_level        Entry[]
  levels_1             Two_Digit[]
  levels_2             Three_Digit[]
  more_than_four_digit More_Than_Four_Digit[]
  clients_level        Account_Entry[]
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  type                 UserType               @default(User)
  permissions          UserPermission[]
  sub_categories       SubCategory[]
  categories           Category[]
  config_id            Int?
  config               Config?                @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, username, config_id, phone_number], name: "unique_combination")
}

model Employee {
  id               Int              @id @default(autoincrement())
  first_name       String
  last_name        String
  phone_number     String
  gender           Gender
  address1         String           @default("")
  address2         String           @default("")
  country          String           @default("")
  email            String           @default("")
  status           Status           @default(Enable)
  create_date      DateTime         @default(now())
  modified_date    DateTime         @default(now()) @updatedAt
  username         String
  user_id          Int
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id        Int?
  config           Config?          @relation(fields: [config_id], references: [id], onDelete: Cascade)
  attendances      Attendance[]
  advance_payments AdvancePayment[]
  vacation         Vacation[]

  @@unique([username, id, config_id], name: "unique_combination")
}

model Trader {
  id            Int       @id @default(autoincrement())
  first_name    String
  last_name     String
  phone_number  String
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  broker_id     Int?
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  accounts      Account[]
  broker        Broker?   @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([username, id, config_id, phone_number], name: "unique_combination")
}

model Broker {
  id            Int       @id
  first_name    String
  last_name     String
  phone_number  String
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  traders       Trader[]
  invoices      Invoice[]
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, username, config_id, phone_number], name: "unique_combination")
}

model Log {
  id          Int      @id @default(autoincrement())
  create_date DateTime @default(now())
  page        String?
  action      Action
  body        String?
  user_id     Int?
  error       String?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?  @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

enum Action {
  Add
  Edit
  Delete
  View
}

model Auth {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      Status
  create_date DateTime @default(now())
  config_id   Int?
  config      Config?  @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([token, id, config_id], name: "unique_combination")
}

model Account {
  id            Int       @id
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String
  currency_id   Int
  trader_id     Int?
  status        Status    @default(Enable)
  user_id       Int?
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trader        Trader?   @relation(fields: [trader_id], references: [id], onDelete: Cascade)
  currency      Currency  @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  config_id     Int?
  config        Config?   @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([username, id, config_id], name: "unique_combination")
}

model Invoice {
  id              Int             @id @default(autoincrement())
  title           String
  description     String          @default("")
  note            String          @default("")
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  amount          Float
  discount        Float           @default(0)
  account_id      Int?
  user_id         Int?
  broker_id       Int?
  currency_id     Int?
  status          Status          @default(Enable)
  sub_category_id Int
  currency        Currency?       @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  account         Account?        @relation(fields: [account_id], references: [id], onDelete: Cascade)
  broker          Broker?         @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  payments        Payment[]
  user            User?           @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  media           Media?
  debit_credit    DebitCreditType @default(Debit)
  sub_category    SubCategory     @relation(fields: [sub_category_id], references: [id], onDelete: Cascade)
  config_id       Int?
  config          Config?         @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model Payment {
  id            Int         @id @default(autoincrement())
  amount        Float
  status        Status
  create_date   DateTime    @default(now())
  modified_date DateTime    @default(now()) @updatedAt
  description   String      @default("")
  note          String      @default("")
  user_id       Int?
  title         String
  type          PaymentType
  number_id     String      @default("")
  user          User?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  media         Media?
  invoice       Invoice     @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id    Int
  config_id     Int?
  config        Config?     @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model Media {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?   @default("")
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  type          MediaType
  path          String
  file_name     String
  status        Status    @default(Enable)
  invoice_id    Int?      @unique
  payment_id    Int?      @unique
  entry_id      Int?      @unique

  invoice Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  entry   Entry?   @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  payment     Payment?     @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?      @relation(fields: [config_id], references: [id], onDelete: Cascade)
  attendances Attendance[]
  vacation    Vacation[]

  @@unique([id, config_id, invoice_id, payment_id, entry_id], name: "unique_combination")
}

model Currency {
  id               Int              @id @default(autoincrement())
  name             String
  symbol           String
  rate             Float?
  accounts         Account[]
  invoices         Invoice[]
  status           Status?          @default(Enable)
  Entries          Entry[]
  create_date      DateTime         @default(now())
  modified_date    DateTime         @default(now()) @updatedAt
  user_id          Int?
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id        Int?
  config           Config?          @relation(fields: [config_id], references: [id], onDelete: Cascade)
  advance_payments AdvancePayment[]

  @@unique([id, config_id, name, symbol], name: "unique_combination")
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String
  sub_categories SubCategory[]
  create_date    DateTime      @default(now())
  modified_date  DateTime      @default(now()) @updatedAt
  status         Status?       @default(Enable)
  user_id        Int?

  user      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id Int?
  config    Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name], name: "unique_combination")
}

model SubCategory {
  id            Int       @id @default(autoincrement())
  name          String
  category_id   Int
  invoices      Invoice[]
  category      Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  user_id       Int?
  status        Status?   @default(Enable)

  user      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id Int?
  config    Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name, category_id], name: "unique_combination")
}

enum SubCategoryType {
  Credit
  Debit
  None
}

enum Gender {
  Male
  Female
  Other
}

enum MediaType {
  Image
  Pdf
  Logo
  File
  Video
}

enum Status {
  Enable
  Disable
  Pending
  Accepted
  Rejected
  Deleted
}

enum PaymentType {
  Cash
  Check
  Other
}

enum UserType {
  Admin
  User
}

enum DebitCreditType {
  Credit
  Debit
}

enum DigitType {
  Assets
  Liabilities
  Owner_Equity
  Expensive
  Income
}

model Two_Digit {
  id              Int             @id
  name            String
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  three_digit     Three_Digit[]
  status          Status          @default(Enable)
  user_id         Int?
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_entries Account_Entry[]
  sub_entries     SubEntry[]

  type         DigitType?
  debit_credit DebitCreditType?
  config_id    Int?
  config       Config?          @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name], name: "unique_combination")
}

model Three_Digit {
  id                   Int                    @id @default(autoincrement())
  name                 String
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  more_than_four_digit More_Than_Four_Digit[]
  account_entries      Account_Entry[]

  two_digit_id Int
  two_digit    Two_Digit        @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  status       Status           @default(Enable)
  type         DigitType?
  debit_credit DebitCreditType?

  sub_entries SubEntry[]
  user_id     Int?
  user        User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?    @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name, two_digit_id], name: "unique_combination")
}

model More_Than_Four_Digit {
  id Int @id

  name            String
  create_date     DateTime         @default(now())
  modified_date   DateTime         @default(now()) @updatedAt
  account_entries Account_Entry[]
  three_digit_id  Int
  three_digit     Three_Digit      @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  status          Status           @default(Enable)
  type            DigitType?
  debit_credit    DebitCreditType?
  sub_entries     SubEntry[]
  user_id         Int?

  user      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id Int?
  config    Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, name, three_digit_id], name: "unique_combination")
}

model Account_Entry {
  id                      Int                   @id
  username                String                @default("")
  first_name              String
  last_name               String
  phone_number            String                @default("")
  gender                  Gender
  address1                String                @default("")
  address2                String                @default("")
  country                 String                @default("")
  email                   String                @default("")
  status                  Status                @default(Enable)
  create_date             DateTime              @default(now())
  modified_date           DateTime              @default(now()) @updatedAt
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  sub_entries             SubEntry[]
  user_id                 Int?
  user                    User?                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ref_entries             SubEntry[]            @relation("reference")
  type                    Account_Entry_Type?
  config_id               Int?
  config                  Config?               @relation(fields: [config_id], references: [id], onDelete: Cascade)
  info                    String?               @default("")

  @@unique([id, config_id], name: "unique_combination")
}

model Entry {
  id            Int        @id @default(autoincrement())
  rate          Float?
  title         String
  description   String
  note          String     @default("")
  create_date   DateTime   @default(now())
  modified_date DateTime   @default(now()) @updatedAt
  to_date       DateTime   @default(now())
  status        Status     @default(Enable)
  sub_entries   SubEntry[]
  media         Media?

  currency_id Int
  currency    Currency @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  user_id     Int?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config?  @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id], name: "unique_combination")
}

model SubEntry {
  id                      Int                   @id @default(autoincrement())
  status                  Status                @default(Enable)
  amount                  Float
  account_entry_id        Int?
  account_entry           Account_Entry?        @relation(fields: [account_entry_id], references: [id], onDelete: Cascade)
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  reference               Account_Entry?        @relation("reference", fields: [reference_id], references: [id], onDelete: Cascade)
  reference_id            Int?
  type                    EntryType             @default(Debit)
  entry_id                Int
  entry                   Entry                 @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  config_id               Int?
  config                  Config?               @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, entry_id], name: "unique_combination")
}

enum EntryType {
  Debit
  Credit
}

model Role {
  id            Int              @id @default(autoincrement())
  name          String
  config_id     Int
  config        Config           @relation(fields: [config_id], references: [id])
  permissions   UserPermission[]
  users         User[]
  create_date   DateTime         @default(now())
  modified_date DateTime         @default(now()) @updatedAt

  @@unique([config_id, name], name: "unique_combination")
}

enum UserPermission {
  PaymentBox
  View_Equity
  View_Equities
  Add_Equity
  Edit_Equity
  Delete_Equity
  Add_Two_Digit
  View_Balance_Sheet
  Edit_Two_Digit
  Delete_Two_Digit
  View_Three_Digit
  View_Threes_Digit
  View_Twos_Digit
  View_More_Than_Fours_Digit
  View_Two_Digit
  Edit_Three_Digit
  Delete_Three_Digit
  Add_More_Than_Four_Digit
  View_More_Than_Four_Digit
  View_Levels_Digit
  Edit_More_Than_Four_Digit
  Delete_More_Than_Four_Digit
  Add_Three_Digit
  Add_Entry
  Edit_Entry
  Delete_Entry
  View_Entry
  View_Entries
  Accounting
  Trading
  Setting
  View_Invoice
  Edit_Invoice
  Delete_Invoice
  Add_Invoice
  View_Invoices
  View_Payment
  Edit_Payment
  Delete_Payment
  Add_Payment
  View_Payments
  View_Profile
  Edit_Profile
  View_Users
  View_User
  Edit_User
  Delete_User
  Add_User
  Add_SubCategory
  Delete_SubCategory
  Edit_SubCategory
  View_SubCategory
  View_SubCategories
  Add_Category
  Delete_Category
  Edit_Category
  View_Category
  View_Categories
  Add_Currency
  Delete_Currency
  Edit_Currency
  View_Currency
  View_Currencies
  View_Trader
  View_Traders
  Edit_Trader
  Delete_Trader
  Add_Trader
  View_Account
  View_Accounts
  Edit_Account
  Delete_Account
  Add_Account
  View_Broker
  View_Brokers
  Edit_Broker
  Delete_Broker
  Add_Broker
  View_Medias
  Delete_Media
  View_Log
  View_Entry_Client
  View_Entry_Clients
  Delete_Entry_Client
  Edit_Entry_Client
  Add_Entry_Client
  View_Entry_IB
  View_Entry_IBs
  Delete_Entry_IB
  Edit_Entry_IB
  Add_Entry_IB
  View_Activity
  View_Activities
  Delete_Activity
  Edit_Activity
  View_Entry_Supplier
  View_Entry_Suppliers
  Delete_Entry_Supplier
  Edit_Entry_Supplier
  Add_Entry_Supplier
  Human_Resources
  Add_Employee
  Edit_Employee
  Delete_Employee
  View_Employee
  View_Employees
  Add_Schedule
  Edit_Schedule
  Delete_Schedule
  View_Schedule
  View_Schedules
  Add_Advance_Payment
  Edit_Advance_Payment
  Delete_Advance_Payment
  View_Advance_Payment
  View_Advance_Payments
  Add_Vacation
  Update_Vaction_Status
  Edit_Vacation
  Delete_Vacation
  View_Vacation
  View_Vacations
  Edit_Config
  View_Config
  View_Schedules_Config
  Delete_Schedules_Config
  View_Schedule_Config
  Edit_Schedule_Config
  Add_Schedule_Config
  Add_Role
  View_Role
  View_Roles
  Edit_Role
  Delete_Role
}

enum Account_Entry_Type {
  Client
  IB
  Supplier
}

model ScheduleConfig {
  id             Int       @id @default(autoincrement())
  from_time      DateTime?
  to_time        DateTime?
  from_over_time DateTime?
  to_over_time   DateTime?
  create_date    DateTime  @default(now())
  modified_date  DateTime  @default(now()) @updatedAt
  config_id      Int?
  config         Config?   @relation(fields: [config_id], references: [id])
}

model Equity {
  id               Int             @id @default(autoincrement())
  status           Status          @default(Enable)
  description      String
  create_date      DateTime        @default(now())
  modified_date    DateTime        @default(now()) @updatedAt
  to_date          DateTime        @default(now())
  coverage_boxes   CoverageBox[]
  manager_boxes    ManagerBox[]
  agent_boxes      AgentBox[]
  p_l              P_LBox[]
  expensive_box    ExpensiveBox[]
  config_id        Int?
  config           Config?         @relation(fields: [config_id], references: [id], onDelete: Cascade)
  credit_boxes     CreditBox[]
  adjustment_boxes AdjustmentBox[]

  @@unique([id, config_id], name: "unique_combination")
}

model CoverageBox {
  id             Int     @id @default(autoincrement())
  account        String
  starting_float Float
  current_float  Float
  closed_p_l     Float
  equity_id      Int
  payment_box    Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id      Int?
  config         Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model ManagerBox {
  id             Int    @id @default(autoincrement())
  manger         String
  starting_float Float
  current_float  Float
  p_l            Float
  commission     Float
  swap           Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model AgentBox {
  id         Int    @id @default(autoincrement())
  name       String
  commission Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model P_LBox {
  id   Int    @id @default(autoincrement())
  name String
  p_l  Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model ExpensiveBox {
  id        Int    @id @default(autoincrement())
  name      String
  expensive Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model CreditBox {
  id     Int    @id @default(autoincrement())
  name   String
  credit Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model AdjustmentBox {
  id         Int    @id @default(autoincrement())
  name       String
  adjustment Float

  equity_id   Int
  payment_box Equity  @relation(fields: [equity_id], references: [id], onDelete: Cascade)
  config_id   Int?
  config      Config? @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([id, config_id, equity_id], name: "unique_combination")
}

model Schedule {
  id            Int          @id @default(autoincrement())
  create_date   DateTime     @default(now())
  modified_date DateTime     @default(now()) @updatedAt
  to_date       DateTime     @default(now())
  attendance    Attendance[]
  config_id     Int?
  config        Config?      @relation(fields: [config_id], references: [id])
}

model Attendance {
  id             Int       @id @default(autoincrement())
  from_time      DateTime?
  to_time        DateTime?
  from_over_time DateTime?
  to_over_time   DateTime?
  absent         Boolean   @default(false)
  description    String?   @default("")
  media          Media?    @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id       Int?
  employee       Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id    Int
  schedule       Schedule  @relation(fields: [schedule_id], references: [id])
  schedule_id    Int
}

model AdvancePayment {
  id            Int       @id @default(autoincrement())
  to_date       DateTime?
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  employee      Employee  @relation(fields: [employee_id], references: [id])
  employee_id   Int
  amount        Float
  currency      Currency  @relation(fields: [currency_id], references: [id])
  private       Boolean   @default(false)

  currency_id Int
}

model Vacation {
  id            Int          @id @default(autoincrement())
  from_date     DateTime?
  to_date       DateTime?
  status        Status       @default(Pending)
  description   String       @default("")
  media         Media?       @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id      Int?
  employee      Employee     @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id   Int
  type          VacationType
  create_date   DateTime     @default(now())
  modified_date DateTime     @default(now()) @updatedAt
  config_id     Int?
  config        Config?      @relation(fields: [config_id], references: [id])
}

enum VacationType {
  Annual_Leave
  Weekly_Leave
  Monthly_Leave
  Sickness_Leave
}
