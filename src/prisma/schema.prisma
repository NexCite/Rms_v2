generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "prisma-zod-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id           Int    @id @default(autoincrement())
  name         String
  logo         String @default("")
  phone_number String @default("")
  email        String @default("")

  password String
  username String
}

model User {
  id           Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  password     String   @default("")
  phone_number String   @unique
  gender       Gender
  address1     String   @default("")
  address2     String   @default("")
  country      String   @default("")
  email        String   @default("")
  status       Status   @default(Enable)
  username     String   @unique
  path         String[]
  auth         Auth[]
  brokers      Broker[]
  traders      Trader[]

  invoices Invoice[]
  logs     Log[]

  payments             Payment[]
  employees            Employee[]
  accounts             Account[]
  currencies           Currency[]
  entries_level        Entry[]
  levels_1             Two_Digit[]
  levels_2             Three_Digit[]
  more_than_four_digit More_Than_Four_Digit[]
  clients_level        Account_Entry[]
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  type                 UserType               @default(User)
  permissions          UserPermission[]
  sub_categories       SubCategory[]
  categories           Category[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  first_name    String
  last_name     String
  phone_number  String   @unique
  gender        Gender
  address1      String   @default("")
  address2      String   @default("")
  country       String   @default("")
  email         String   @default("")
  status        Status   @default(Enable)
  create_date   DateTime @default(now())
  modified_date DateTime @default(now()) @updatedAt
  username      String   @unique
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Trader {
  id            Int       @id @default(autoincrement())
  first_name    String
  last_name     String
  phone_number  String    @unique
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  broker_id     Int?
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String    @unique
  accounts      Account[]
  broker        Broker?   @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Broker {
  id            Int       @id
  first_name    String
  last_name     String
  phone_number  String    @unique
  gender        Gender
  address1      String    @default("")
  address2      String    @default("")
  country       String    @default("")
  email         String    @default("")
  user_id       Int?
  status        Status    @default(Enable)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String    @unique
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  traders       Trader[]
  invoices      Invoice[]
}

model Log {
  id          Int      @id @default(autoincrement())
  create_date DateTime @default(now())
  page        String?
  action      Action
  body        String?
  user_id     Int
  error       String?
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Action {
  Add
  Edit
  Delete
  View
}

model Auth {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique()
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      Status
  create_date DateTime @default(now())
}

model Account {
  id            Int       @id
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  username      String    @unique()
  currency_id   Int
  trader_id     Int?
  status        Status    @default(Enable)
  user_id       Int?
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trader        Trader?   @relation(fields: [trader_id], references: [id], onDelete: Cascade)
  currency      Currency  @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  invoices      Invoice[]
}

model Invoice {
  id              Int             @id @default(autoincrement())
  title           String
  description     String          @default("")
  note            String          @default("")
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  amount          Float
  discount        Float           @default(0)
  account_id      Int?
  user_id         Int?
  broker_id       Int?
  currency_id     Int?
  status          Status          @default(Enable)
  sub_category_id Int
  currency        Currency?       @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  account         Account?        @relation(fields: [account_id], references: [id], onDelete: Cascade)
  broker          Broker?         @relation(fields: [broker_id], references: [id], onDelete: Cascade)
  payments        Payment[]
  user            User?           @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  media           Media?
  debit_credit    DebitCreditType @default(Debit)
  sub_category    SubCategory     @relation(fields: [sub_category_id], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int         @id @default(autoincrement())
  amount        Float
  status        Status
  create_date   DateTime    @default(now())
  modified_date DateTime    @default(now()) @updatedAt
  description   String      @default("")
  note          String      @default("")
  user_id       Int?
  title         String
  type          PaymentType
  number_id     String      @default("")
  user          User?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  media         Media?
  invoice       Invoice     @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id    Int
}

model Media {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?   @default("")
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  type          MediaType
  path          String
  status        Status    @default(Enable)
  invoice_id    Int?      @unique()
  payment_id    Int?      @unique()
  entry_id      Int?      @unique()

  invoice Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  entry   Entry?   @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  payment Payment? @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model Currency {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  symbol        String    @unique
  accounts      Account[]
  invoices      Invoice[]
  status        Status?   @default(Enable)
  Entries       Entry[]
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  user_id       Int?
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  sub_categories SubCategory[]
  create_date    DateTime      @default(now())
  modified_date  DateTime      @default(now()) @updatedAt
  status         Status?       @default(Enable)
  user_id        Int?

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SubCategory {
  id            Int       @id @default(autoincrement())
  name          String
  category_id   Int
  invoices      Invoice[]
  category      Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  create_date   DateTime  @default(now())
  modified_date DateTime  @default(now()) @updatedAt
  user_id       Int?
  status        Status?   @default(Enable)

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum SubCategoryType {
  Credit
  Debit
  None
}

enum Gender {
  Male
  Female
  Other
}

enum MediaType {
  Image
  Pdf
}

enum Status {
  Enable
  Disable
  Pending
  Accepted
  Rejected
  Deleted
}

enum PaymentType {
  Cash
  Check
  Other
}

enum UserType {
  Admin
  User
}

enum DebitCreditType {
  Credit
  Debit
}

enum DigitType {
  Assets
  Liabilities
  Owner_Equity
  Expensive
  Income
}

model Two_Digit {
  id              Int             @id @unique
  name            String          @unique
  create_date     DateTime        @default(now())
  modified_date   DateTime        @default(now()) @updatedAt
  three_digit     Three_Digit[]
  status          Status          @default(Enable)
  user_id         Int?
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_entries Account_Entry[]
  sub_entries     SubEntry[]

  type         DigitType?
  debit_credit DebitCreditType?
}

model Three_Digit {
  id                   Int                    @id @unique @default(autoincrement())
  name                 String                 @unique
  create_date          DateTime               @default(now())
  modified_date        DateTime               @default(now()) @updatedAt
  more_than_four_digit More_Than_Four_Digit[]
  account_entries      Account_Entry[]

  two_digit_id Int
  two_digit    Two_Digit        @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  status       Status           @default(Enable)
  type         DigitType?
  debit_credit DebitCreditType?

  sub_entries SubEntry[]
  user_id     Int?
  user        User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model More_Than_Four_Digit {
  id Int @id @unique

  name            String           @unique
  create_date     DateTime         @default(now())
  modified_date   DateTime         @default(now()) @updatedAt
  account_entries Account_Entry[]
  three_digit_id  Int
  three_digit     Three_Digit      @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  status          Status           @default(Enable)
  type            DigitType?
  debit_credit    DebitCreditType?
  sub_entries     SubEntry[]
  user_id         Int?

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Account_Entry {
  id                      Int                   @id @unique
  username                String                @unique
  first_name              String
  last_name               String
  phone_number            String                @default("")
  gender                  Gender
  address1                String                @default("")
  address2                String                @default("")
  country                 String                @default("")
  email                   String                @default("")
  status                  Status                @default(Enable)
  create_date             DateTime              @default(now())
  modified_date           DateTime              @default(now()) @updatedAt
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  sub_entries             SubEntry[]
  user_id                 Int?
  user                    User?                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ref_entries             SubEntry[]            @relation("reference")
  type                    Account_Entry_Type?
}

model Entry {
  id            Int        @id @unique @default(autoincrement())
  title         String
  description   String
  note          String     @default("")
  create_date   DateTime   @default(now())
  modified_date DateTime   @default(now()) @updatedAt
  to_date       DateTime   @default(now())
  status        Status     @default(Enable)
  sub_entries   SubEntry[]
  media         Media?
  currency_id   Int
  currency      Currency   @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  user_id       Int?
  user          User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SubEntry {
  id                      Int                   @id @default(autoincrement())
  status                  Status                @default(Enable)
  amount                  Float
  account_entry_id        Int?
  account_entry           Account_Entry?        @relation(fields: [account_entry_id], references: [id], onDelete: Cascade)
  two_digit_id            Int?
  two_digit               Two_Digit?            @relation(fields: [two_digit_id], references: [id], onDelete: Cascade)
  three_digit_id          Int?
  three_digit             Three_Digit?          @relation(fields: [three_digit_id], references: [id], onDelete: Cascade)
  more_than_four_digit_id Int?
  more_than_four_digit    More_Than_Four_Digit? @relation(fields: [more_than_four_digit_id], references: [id], onDelete: Cascade)
  reference               Account_Entry?        @relation("reference", fields: [reference_id], references: [id], onDelete: Cascade)
  reference_id            Int?
  type                    EntryType             @default(Debit)
  entry_id                Int
  entry                   Entry                 @relation(fields: [entry_id], references: [id], onDelete: Cascade)
}

enum EntryType {
  Debit
  Credit
}

enum UserPermission {
  Add_Account_Entry
  Edit_Account_Entry
  Delete_Account_Entry
  View_Account_Entry
  View_Account_Entries
  Add_Two_Digit
  View_Export_Entry
  Edit_Two_Digit
  Delete_Two_Digit
  View_Three_Digit
  View_Threes_Digit
  View_Twos_Digit
  View_More_Than_Fours_Digit
  View_Two_Digit
  Edit_Three_Digit
  Delete_Three_Digit
  Add_More_Than_Four_Digit
  View_More_Than_Four_Digit
  View_Levels_Digit
  Edit_More_Than_Four_Digit
  Delete_More_Than_Four_Digit
  Add_Three_Digit
  Add_Entry
  Edit_Entry
  Delete_Entry
  View_Entry
  View_Entries
  Accounting
  Accounting_Level
  Trading
  Account_Entry
  Setting
  View_Invoice
  Edit_Invoice
  Delete_Invoice
  Add_Invoice
  View_Invoices
  View_Payment
  Edit_Payment
  Delete_Payment
  Add_Payment
  View_Payments
  View_Profile
  Edit_Profile
  View_Users
  View_User
  Edit_User
  Delete_User
  Add_User
  Add_SubCategory
  Delete_SubCategory
  Edit_SubCategory
  View_SubCategory
  View_SubCategories
  Add_Category
  Delete_Category
  Edit_Category
  View_Category
  View_Categories
  Add_Currency
  Delete_Currency
  Edit_Currency
  View_Currency
  View_Currencies
  View_Trader
  View_Traders
  Edit_Trader
  Delete_Trader
  Add_Trader
  View_Account
  View_Accounts
  Edit_Account
  Delete_Account
  Add_Account
  View_Broker
  View_Brokers
  Edit_Broker
  Delete_Broker
  Add_Broker
  View_Medias
  Delete_Media
  View_Log
  View_Entry_Client
  View_Entry_Clients
  Delete_Entry_Client
  Edit_Entry_Client
  Add_Entry_Client
  View_Entry_IB
  View_Entry_IBs
  Delete_Entry_IB
  Edit_Entry_IB
  Add_Entry_IB
  View_Entry_Supplier
  View_Entry_Suppliers
  Delete_Entry_Supplier
  Edit_Entry_Supplier
  Add_Entry_Supplier
}

enum Account_Entry_Type {
  Client
  IB
  Supplier
}

model PaymentBox {
  id             Int            @id @default(autoincrement())
  status         Status         @default(Enable)
  description    String
  create_date    DateTime       @default(now())
  modified_date  DateTime       @default(now()) @updatedAt
  to_date        DateTime       @default(now())
  coverage_boxes CoverageBox[]
  client_boxes   ClientBox[]
  agent_boxES    AgentBox[]
  p_l            P_LBox[]
  expensive_box  ExpensiveBox[]
}

model CoverageBox {
  id             Int        @id @default(autoincrement())
  account        String
  starting_float Float
  current_float  Float
  closed_p_l     Float
  payment_box_id Int
  payment_box    PaymentBox @relation(fields: [payment_box_id], references: [id])
}

model ClientBox {
  id             Int    @id @default(autoincrement())
  manger         String
  starting_float Float
  current_float  Float
  p_l            Float
  commission     Float
  swap           Float

  payment_box_id Int
  payment_box    PaymentBox @relation(fields: [payment_box_id], references: [id])
}

model AgentBox {
  id       Int    @id @default(autoincrement())
  name     String
  comssion Float

  payment_box_id Int
  payment_box    PaymentBox @relation(fields: [payment_box_id], references: [id])
}

model P_LBox {
  id   Int    @id @default(autoincrement())
  name String
  p_l  Float

  payment_box_id Int
  payment_box    PaymentBox @relation(fields: [payment_box_id], references: [id])
}

model ExpensiveBox {
  id        Int    @id @default(autoincrement())
  name      String
  expensive Float

  payment_box_id Int
  payment_box    PaymentBox @relation(fields: [payment_box_id], references: [id])
}
